@using Agility.Web.Components
@using Agility.Components.Blog.Extensions
@using Agility.Components.Blog.Classes
@using Agility.Components.Blog.ViewModels
@model PostViewModel

<div class="agility-blg-post-details-module agility-module" data-contentid="@Model.Post.ContentID" data-languagecode="@Model.Post.LanguageCode" data-referencename="@Model.Post.ReferenceName">

    <h1>@Model.Post["Title"]</h1>

    @Html.Partial(AgilityComponents.TemplatePath("Blog-PostAttributes"), Model)

    @if (BlogUtils.GetBool(Model.Post["DisplayImageinPost"]) && BlogUtils.HasPostImage(Model.Configuration, Model.Post, PostImageType.Details))
    {
        <div class="agility-blg-details-image-container">
            @Html.Partial(AgilityComponents.TemplatePath("blog-PostImage"), new PostImageViewModel()
            {
                Post = Model.Post,
                Type = PostImageType.Details,
                Configuration = Model.Configuration
            })
        </div>
    }

    <div class="agility-blg-post-textblob">
        @Html.Raw(Model.Post["Textblob"] as string)
    </div>

    <div class="agility-blg-cat-attributes">
        @if (BlogUtils.GetBool(Model.Module["ListCategories"]) && Model.Categories.Any())
        {
            <div class="agility-blg-post-categories">
                <span>@Model.Module["CategoriesLabel"]</span>
                @Html.Partial(AgilityComponents.TemplatePath("Blog-Links"), new BlogLinkViewModel()
            {
                Configuration = Model.Configuration,
                Items = Model.Categories.Select(i => new BlogLinkItem()
                {
                    Title = i["Title"] as string,
                    Url = i.BlogDynamicUrl(Model.Configuration)
                }).ToList()
            })
            </div>
        }


        @if (BlogUtils.GetBool(Model.Module["ListTags"]) && Model.Tags.Any())
        {
            <div class="agility-blg-post-tags">
                <span>@Model.Module["TagsLabel"]</span>
                @Html.Partial(AgilityComponents.TemplatePath("Blog-Links"), new BlogLinkViewModel()
            {
                Configuration = Model.Configuration,
                Items = Model.Tags.Select(i => new BlogLinkItem()
                {
                    Title = i["Title"] as string,
                    Url = i.BlogDynamicUrl(Model.Configuration)
                }).ToList()
            })
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(Model.Module["LeaveCommentLabel"] as string))
    {
    <div class="agility-blg-leave-comment">
        <a href="#agility-comments" title="@Model.Module["LeaveCommentLabel"]">@Model.Module["LeaveCommentLabel"]</a>
    </div>
    }

    <div class="agility-clearfix"></div>

    @if (Model.RelatedPosts != null && Model.RelatedPosts.Any())
    {
    <hr />
    <div class="agility-blg-related-posts">
        @if (!string.IsNullOrEmpty(Model.Module["RelatedPostsLabel"] as string))
        {
        <h4>@Model.Module["RelatedPostsLabel"] </h4>
        }
        <div class="agility-row">
            @foreach (var p in Model.RelatedPosts)
            {
                <div class="agility-col-sm-6">
                    @Html.Partial(AgilityComponents.TemplatePath("Blog-ListedPostMini"), new PostViewModel()
                {
                    Post = p,
                    Configuration = Model.Configuration,
                    CurrentCategory = null
                })
                </div>
            }
        </div>
    </div>
    }

</div>